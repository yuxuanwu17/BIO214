%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.11
%%CreationDate: Sun Apr 19 10:17:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -T 70.000000 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UCCGCAGAUGAGCCUACUGCCUCACAACAGCCUCCACAGGCACAGCUCCAUCGUUACAAUGG\
) def
/coor [
[96.65213013 276.53265381]
[85.29362488 266.62063599]
[76.63784790 254.27798462]
[71.18804169 240.22227478]
[69.26104736 225.27069092]
[70.96889496 210.29248047]
[76.21229553 196.15847778]
[84.68640137 183.69039917]
[95.89853668 173.61312866]
[109.19685364 166.51254272]
[105.49549103 151.97637939]
[101.79412842 137.44023132]
[98.09277344 122.90406799]
[87.05339050 118.98997498]
[79.37638855 110.14398193]
[77.05555725 98.66349030]
[80.69364166 87.53010559]
[89.34579468 79.63528442]
[87.11016083 64.80281830]
[84.87452698 49.97035599]
[82.63889313 35.13789368]
[80.40325928 20.30543137]
[65.58494568 17.02183723]
[52.95561981 8.60372734]
[44.22329712 -3.81041503]
[40.56894684 -18.54167938]
[42.48679352 -33.59778595]
[49.71746445 -46.94251633]
[61.28306961 -56.77110672]
[75.61946106 -61.75432205]
[90.78775024 -61.21821976]
[104.73655701 -55.23530960]
[115.57941437 -44.61472702]
[121.84992218 -30.79281616]
[122.70004272 -15.63888168]
[118.01480103 -1.20236683]
[108.42784882 10.56430817]
[95.23572540 18.06979752]
[97.47135925 32.90225983]
[99.70699310 47.73472214]
[101.94262695 62.56718445]
[104.17826080 77.39965057]
[119.02538300 87.10547638]
[122.54011536 104.49187469]
[112.62892914 119.20270538]
[116.33029175 133.73886108]
[120.03165436 148.27502441]
[123.73301697 162.81118774]
[138.80775452 162.68708801]
[153.47399902 166.17491150]
[166.87904358 173.07188416]
[178.24356079 182.97698975]
[186.90681458 195.31439209]
[192.36514282 209.36680603]
[194.30120850 224.31721497]
[192.60244751 239.29646301]
[187.36761475 253.43363953]
[178.90106201 265.90686035]
[167.69503784 275.99093628]
[154.40103149 283.09957886]
[139.79193115 286.81948853]
[124.71711731 286.93444824]
] def
/pairs [
[10 48]
[11 47]
[12 46]
[13 45]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
